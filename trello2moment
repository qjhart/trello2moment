#! /usr/bin/env node
'use strict';

const { program } = require('commander');
const jf=require('jsonfile');
const fs=require('fs');
const path=require('path');
const N3=require('n3');
const fetch=require('node-fetch');
const { namedNode, literal, defaultGraph, quad } = N3.DataFactory;
const n3u=N3.Util;
const marked = require('marked');
const traverse = require('traverse');
const urljoin = require('url-join');

var prefix= {
  schema: 'http://schema.org/',
  ucdlib: 'http://digital.ucdavis.edu/schema#',
	w: 'http://library.ucdavis.edu/wine-ontology#',
  fast: 'http://id.worldcat.org/fast/',
	wdt: 'http://www.wikidata.org/prop/direct/',
  rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  ldp: 'http://www.w3.org/ns/ldp#'
}

var rdf= {
  type:1
}
Object.keys(rdf).forEach((k)=>{rdf[k]=namedNode(prefix.rdf+k)});

var ldp = {
  BasicContainer:1,
  Dataset:1
}
Object.keys(ldp).forEach((k)=>{ldp[k]=namedNode(prefix.ldp+k)});

var ucdlib = {
  BagOfFiles:1,
  Moment:1
}
Object.keys(ucdlib).forEach((k)=>{ucdlib[k]=namedNode(prefix.ucdlib+k)});

var schema = {
  CreativeWork: 1,
  Event:1,
  ImageObject:1,
  ListItem:1,
  Thing:1,
  Person:1,
  Place:1,
  VisualArtwork:1,
  WebPage:1,
  about:1,
  author:1,
  caption:1,
  creator:1,
  contentUrl:1,
  datePublished:1,
  description:1,
  encodingFormat:1,
  headline:1,
  identifier:1,
  image:1,
  keywords:1,
  label:1,
  license:1,
  latitude:1,
  longitude:1,
  name:1,
  position:1,
  publisher:1,
  publication:1,
  relatedLinkText:1,
  relatedLink:1,
  sdDatePublished:1,
  sdPublisher:1,
  story:1,
  significantLinks:1,
  spatial:1,
  temporal:1,
  text:1,
  thumbnail:1,
  url:1,
}
Object.keys(schema).forEach((k)=>{schema[k]=namedNode(prefix.schema+k)});


program
		.version('0.5.0')
		.description('Convert a Trello board into a UCDavis library moment linked dataset.')
    .option('-v, --verbose','verbose output',false)
    .option('-o --overwrite','overwrite existing files',false)
    .option('--thumbnails','download thumbnail images',false)
    .requiredOption('-k, --key <key>','Trello user key')
    .requiredOption('-t, --token <token>','Trello user token')
		.requiredOption('-m, --moment <moment>','To moment name')
		.requiredOption('-b, --board <trello_board>','From Trello Short URL name')

program.parse(process.argv);

var writer = new N3.Writer({prefixes: prefix});

function add(s,p,o) {
	return writer.addQuad(s,p,o);
}

// Allow Verbose Output
function log(text) {
  if (program.verbose) {
    console.log(text)
  }
}

// Check for file, but not if overwrite
function fileExists(fn) {
  if ( !fs.existsSync(fn) || program.overwrite ) {
    return false;
  }
  return true;
}

var card_type=[];

moment(program.key,program.token,program.moment,program.board,program.thumbnails,program.images,program.overwrite);

async function getBoardJSON(trelloKey,trelloToken,boardName) {
  try {
    const response = await fetch('https://api.trello.com/1/boards/'+boardName+'?key='+trelloKey+'&token='+trelloToken+'&lists=all&cards=visible&card_attachments=true', {
      method: 'GET',
      headers: { 'Accept': 'application/json' }
    });
    const json = await response.json();
    return json;
  } catch (e) {
    console.error('Error: ', e);
  }
}

function createBoard(outputPath,json) {
  fs.writeFileSync(outputPath, JSON.stringify(json, 0, 2), (err) => {
    if (err) throw err;
  });
}

function getBoard(boardPath) {
  try {
    return jf.readFileSync(boardPath);
  } catch (err) {
    throw err;
  }
}

async function getImages(momentName, jsonObj) {
  for ( let id in jsonObj ) {
    let shortId = jsonObj[id].shortLink;
    for ( let item of jsonObj[id].attachments ) {
      if ( item.isUpload ) {
        let d=path.join(momentName, shortId);
        if ( !fs.existsSync(d) ) {
          log(`mkdir ${d}(.ttl)`)
          fs.mkdirSync(d);
          let ttl = new N3.Writer({prefixes: prefix});
          let n=namedNode('');
          ttl.addQuad(n,rdf.type,ldp.BasicContainer);
          ttl.end((error, result) => {
            fs.writeFile(`${d}.ttl`, result, (err) => {
              if (err) throw err;
            });
          });
        }

        await fetchFile(item.url,path.join(momentName, shortId, item.fileName))
      }
    }
  }
}

function fetchFile(url,fileName) {
  if ( ! fileExists(fileName) ) {
    log(`fetch ${url} to ${fileName}`);
    return new Promise(async (resolve, reject) => {
      try {
        const res = await fetch(url);

        res.body
          .pipe(fs.createWriteStream(fileName.replace(/ /g, '_')))
          .on('close', () => resolve());

        let cleanFileName = fileName.replace(/ /g, '_'); //remove any pesky whitespaces

        let ttl = new N3.Writer({prefixes: prefix});
        let n=namedNode('');
        ttl.addQuad(n,schema.publisher,
                    namedNode('http://id.loc.gov/authorities/names/no2008108707'));
        ttl.addQuad(n,schema.license,
                    namedNode('http://rightsstatements.org/vocab/CNE/1.0/'));
        ttl.addQuad(n,schema.encodingFormat,
                    literal('image/' + path.extname(cleanFileName).substr(1)));
        ttl.addQuad(n,schema.name,
                    literal(path.basename(cleanFileName)));
        ttl.end((error, result) => fs.writeFileSync(`${cleanFileName}.ttl`, result));
      } catch (err) {
        console.error('Error: ', err);
      }
    });
  } else {
    log(`skipping ${url}, ${fileName} exists. (can --overwrite)`);
  }
}

// https://help.trello.com/article/759-getting-the-time-a-card-or-board-was-created
function getBoardCreationDate(boardJSON) {
  return new Date(1000*parseInt(boardJSON.id.substr(0,8),16));
}

function getKeywordsFromBoardDescription(boardJSON, _wordType) {
  let wordType = _wordType.toLowerCase();
  let arr = [];

  let pred='';
  let text=[''];
  let list_depth = 0;

  let json = marked.lexer(boardJSON.desc);
  json.push({type:'heading','text':'EndQ'});
  for ( let i=0; i<json.length; i++ ) {
    let item = json[i];
    switch (item.type) {
      case 'heading':
        if ( item.depth === 1 ) {
          if ( item.text === 'Keywords' ) {
            pred = item.text;
          } else if ( item.text === 'About' ) {
            pred = item.text;
          }
        }

        if (text[0].length > 1) {
          pred = item.text;
          list_depth = 0;
          text = [''];
        }

        break;
      case 'list_start':
        list_depth++;
        text[list_depth] = '';
        break;
      case 'list_end':
        list_depth--;
        break;
      case 'list_item_start':
        break;
      case 'list_item_end':
        text[list_depth]='';
        break;
      case 'text':
        if ( pred.toLowerCase() === wordType ) {
          text[list_depth] += item.text;
          arr.push(text[list_depth])
        }
      default:
        break;
    }
  }

  return arr;
}

async function createMomentDefinition(boardJSON, momentName) {
  try {
    await fetchFile(boardJSON.prefs.backgroundImage, momentName+'/thumbnail.jpg');

    let ttl = new N3.Writer({prefixes: prefix});
    let n   = namedNode('');
    ttl.addQuad(n,rdf.type,ldp.BasicContainer);
    ttl.addQuad(n,rdf.type,ldp.Dataset);
    ttl.addQuad(n,rdf.type,schema.CreativeWork);
    ttl.addQuad(n,rdf.type,ucdlib.Moment);
    ttl.addQuad(n,rdf.type,ucdlib.BagOfFiles);
    ttl.addQuad(n,schema.publisher,
        namedNode('http://id.loc.gov/authorities/names/no2008108707'));
    ttl.addQuad(n,schema.license,
        namedNode('http://rightsstatements.org/vocab/CNE/1.0/'));

    let keywordsArray = getKeywordsFromBoardDescription(boardJSON,'Keywords');
    for ( let i=0; i<keywordsArray.length; i++ ) {
      ttl.addQuad(n,schema.keywords, literal(keywordsArray[i]));
    };

    let aboutArray  = getKeywordsFromBoardDescription(boardJSON,'About');
    for ( let i=0; i<aboutArray.length; i++) {
      if ( aboutArray[i].match(/\[(.*?)\]/) ) {
        let item = aboutArray[i].replace(/\[/,'').split(']');
        ttl.addQuad(n,schema.about,literal(item));
      } else if ( aboutArray[i].match(/\s/) ) {
        let item = aboutArray[i].split(' ');
        ttl.addQuad(n,schema.about,literal(item));
      } else {
        ttl.addQuad(n,schema.about,literal(aboutArray[i]));
      }
    }

    ttl.addQuad(n,schema.name,literal(momentName));
    ttl.addQuad(n,schema.description,literal(boardJSON.desc));
    ttl.addQuad(n,schema.datePublished,literal(getBoardCreationDate(boardJSON).getFullYear()));
    ttl.addQuad(n,schema.sdDatePublished,literal(new Date().getFullYear()));
    //ttl.addQuad(n,schema.sdPublisher,literal('fast:972696')); TODO: this => http://experimental.worldcat.org/fast/843527/
    ttl.addQuad(n,schema.image,namedNode(momentName+'/thumbnail.jpg'));
    ttl.end((error, result) => fs.writeFileSync(`${momentName}.ttl`, result));
  } catch (err) {
    console.error('Error: ', err);
  }
}

async function moment (key, token, moment_name, board_name, thumbnails, images) {
  let board, board_fn;

  // Create the moment directory
  await fs.mkdirSync(path.join(moment_name), { recursive: true }, (err) => {
    if (err) throw err;
  });

  // Get board name and location
  board_fn = path.join(moment_name, board_name + '.json');

  if ( !fileExists(board_fn) ) {
    log(`fetching ${board_name} to ${board_fn}`);
    let raw_board = await getBoardJSON(key, token, board_name);
    createBoard(board_fn, raw_board);
  } else {
    log(`using existing ${board_fn}, (can --overwrite)`)
  }

  try {
    board = getBoard(board_fn);
	} catch (err) {
    throw err;
  }

  createMomentDefinition(board, moment_name);

  let cards = board.cards;

  if ( thumbnails ) {
    getImages(moment_name,cards);
  }

  set_card_type_from_lists(board.lists);

  for(let k=0;k<cards.length;k++) {
    await add_card(cards[k],k);
  }

  writer.end((error, result) => {
    fs.writeFile(program.moment+'_moment.ttl', result, (err) => {
      if (err) throw err;
    });
  });
}

function set_card_type_from_lists(lists) {
  lists.forEach((l)=>{
    if ( l.closed ) return; // don't bother with closed cards
    let m = l.name;
    if (m==='Connections') m='significantLinks';
    if (m==='Object') m='Thing';

    if ( !m.includes('Card Creation Guides')) {
      if (m && schema[m]) {
        //console.error(`schema[${m}]`);
        card_type[l.id]=schema[m];
      } else {
        //console.error(`namedNode(${prefix.ucdlib}${m})`);
        card_type[l.id] = namedNode(prefix.ucdlib+m.replace(/\s+/g,'_'));
      }
    }
  });
}

// This version of add will do some additional testing for adding literals.etc
function add_spo(s,p,o) {
  const urlre=/^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/;

  if (typeof(s)==='string') {
    if (s.match(urlre)) {
      s=namedNode(s.replace('https://trello.com/c/','#'));
    }
  }

  if ( typeof(o) === 'string' && o.match(urlre) ) {
    o=o.replace(/[\s\n]+$/,'');
    o = namedNode(o.replace('https://trello.com/c/','#'));
        //console.error(`{<${s.id}>,<${p.id}>,<${o}>}`);
  }
  else {
    o=o.replace(/[\s\n]+$/,'');
    o=literal(o)
    //console.error(`{<${s.id}>,<${p.id}>,"${o}"}`);
  }
  add(s,p,o);
}

async function getLink(url) {
  log(`getLink(${url})`);
  try {
    const response = await fetch(url, {
      method:'HEAD'
    });
    const location = await response.url;
    return location;
  } catch (e) {
    console.error('Error: ', e);
  }
};

async function format_map_link(map_link) {
  let obj;
  let place_re = new RegExp('^https://www.google.com/maps/place/(?<loc>[^/]*)/@?(?<lat>[-0-9.]*),(?<lon>[0-9.-]*),');
  let googl_map_re = new RegExp('^https://goo.gl/maps/');

  let place_link;
  if (map_link.match(googl_map_re)) {
    place_link=await getLink(map_link)
    //console.error(`getLink ${map_link} -> ${place_link}`)
  } else {
    place_link=map_link
  }

  let found=place_link.match(place_re);
  if (found) {
    obj=found.groups;
    obj.loc = decodeURIComponent(obj.loc);
  } else {
    obj={url:map_link}
  }
  let b=[{ predicate: rdf.type, object: schema.Place }];

  if ( obj.loc ) //console.log(obj.loc); // Check to make sure decoded properly

  (obj.loc) && b.push({predicate: schema.name,object: literal(obj.loc)});
  (obj.lat) && b.push({predicate: schema.latitude,object: literal(parseFloat(obj.lat))});
  (obj.lon) && b.push({predicate: schema.longitude,object: literal(parseFloat(obj.lon))});
  (obj.url) && b.push({predicate: schema.url,object: namedNode(obj.url)});

  return b;
}

function format_image(str,position,url) {
  let b = [{ predicate: rdf.type, object: schema.ImageObject }];
  b.push({predicate: schema.position,object: literal(position)});
  let tmpArray = str.split('/');
  for ( let key in tmpArray ) {
    if (tmpArray[key].match((/.(jpe?g|gif|png|tiff|svg)/))) {
      let image_url=tmpArray[key].trim();
      b.push({predicate: schema.contentUrl, object: namedNode(url.replace('#','') + '/' + image_url)});
      console.log(b)
    } else {
      b.push({predicate: schema.caption, object: literal(tmpArray[key].trim())});
    }
  }

  return b;
}

async function add_desc(node,desc) {
  let pred='';
  let text=[''];
  let list_depth=0;
  let list_position=0;
  let json = marked.lexer(desc);

  // Silly way to flush
  json.push({type:'heading','text':'EndQ'});
  for (let i=0; i<json.length; i++) {
    let item=json[i];
    switch (item.type) {
    case 'heading':
      if (text[0].length > 1)
        if (item.text === 'Description') {
          add_spo(node,schema.story,text[0]);
        } else {
          add_spo(node,schema.description,text[0]);
        }
      pred = item.text;
      list_depth = 0;
      text = [''];
      break;
    case 'list_start':
      list_depth++;
      list_position=0;
      text[list_depth] = '';
      break;
    case 'list_end':
      list_depth--;
      break;
    case 'list_item_start':
      list_position++
      break;
    case 'list_item_end':
      switch(pred) {
      case "About":
        let reg = new RegExp(/\(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/g);
        if ( text[list_depth].match(reg) ) {
          add_spo(node, schema.license, text[list_depth]);
        } else {
          add_spo(node, schema.about, text[list_depth]);
        }
        break;
      case "Attribution":
        add_spo(node, schema.author, text[list_depth]);
        break;
      case "Date":
        add_spo(node,schema.temporal,text[list_depth]);
        break;
      case "Headline":
        add_spo(node,schema.headline,text[list_depth]);
        break;
      case "Identifier":
        add_spo(node, schema.story, text[list_depth]);
        break;
      case "Image Caption":
        add_spo(node,schema.caption,text[list_depth]);
        break;
      case "Image Credit":
        add_spo(node,schema.creator,text[list_depth]);
        break;
      case "Images":
        let c = format_image(text[list_depth],list_position,node.id);
        add(node,schema.image,writer.blank(c));
        break;
      case "Learn More":
        if ( list_depth === 1 ) {
          add_spo(node,schema.relatedLinkText,text[list_depth]);
        } else {
          let link = text[list_depth];
          if ( text[list_depth].match(/(http(s?)):\/\//i) === null ) {
            link = 'https://' + text[list_depth];
          } else {
            link = text[list_depth];
          }
          add_spo(node,schema.relatedLink,link);
        }
        break;
      case "Location":
        if (text[list_depth].match(/^http(s):/)) {
          let b=await format_map_link(text[list_depth]);
          add(node, schema.spatial, writer.blank(b));
        } else {
          add_spo(node,schema.spatial,text[list_depth]);
        }
        break;
      case "Sources":
        add_spo(node, schema.publication, text[list_depth]);
        break;
      case "Source":
        add_spo(node, schema.publication, text[list_depth]);
        break;
      case "Text":
        if ( list_depth === 1 ) {
          add_spo(node, schema.headline, text[list_depth]);
        } else {
          add_spo(node, schema.text, text[list_depth]);
        }
        break;
      default:
        //console.error(`# ${node},${pred} ${text[1]} #`);
      }
      text[list_depth]='';
      break;
    case 'text':
      text[list_depth] += item.text;
      break;
    case 'space':
      text[list_depth] += ' ';
      break;
    case 'paragraph':
      text[list_depth] += item.text + '\n\n';
      break;
    default:
      break;
    }
  }
}

async function add_card(card,position) {
  // Weed out the Template cards & Archived 'closed' cards
  if ( card['isTemplate'] || card['closed'] ) return;

  let attachment_re=new RegExp('https://trello.com/c/([^/]*)(.*$)');
  let type=card_type[card.idList];

  if (type) {
    let n=namedNode('#'+card.shortLink);
    add(n,schema.name,literal(card.name));
    add(n,schema.publisher,namedNode('http://id.loc.gov/authorities/names/no2008108707'));
    add(n,schema.license,namedNode('http://rightsstatements.org/vocab/CNE/1.0/'));
    add(n,schema.position,literal(position));
    add(n,rdf.type,type);

    if (card.idAttachmentCover) {
      //console.error('card.cover');
      card.attachments.forEach((a)=>{
        if (a.id === card.idAttachmentCover) {
          //console.error('card.cover.add');
          let a_url_basename = new URL(a.url).pathname.split('/').pop();
          add(n,schema.thumbnail,namedNode(urljoin(card.shortLink, a_url_basename)));
        }
      });
    }

    if ( type === schema.significantLinks ) {
      // Now get the labels to use
      card.labels.forEach((l)=>{
        let to_from=l.name.split(" / ");
        if (to_from.length === 2) {
          let sub=namedNode(card.attachments[1].url.replace(attachment_re,`#$1`));
          let obj=namedNode(card.attachments[0].url.replace(attachment_re,`#$1`));

          // Create a unique predicate of type significant Links
          // At a later date, we can add rules to create the reversal
          let pred = n;
          if ("desc" in card) {
            add(n,schema.description,literal(card.desc));
          }

          let pred_type=namedNode(prefix.ucdlib+to_from[0].replace(/\s+/g,'_'));
          //console.error(`add(${pred.id},rdf.type,schema.significantLinks)`);
          //console.error(`add(${pred.id},rdf.type,${pred_type.id})`);
          //console.error(`add(${pred.id},schema.name,${to_from[0]})`);
          //console.error(`add(${sub},${pred.id},${obj})`);
          // add(pred,rdf.type,schema.significantLinks);
          add(pred,rdf.type,pred_type);
          add(pred,schema.name,literal(to_from[0]));
          add(sub,pred,obj);
          // At a Later Date, we can add in rules for reverse predicates so
          // this wouldn't be necessary
          let rev_pred=namedNode(n.id+'_rev');
          let rev_pred_type=namedNode(prefix.ucdlib+to_from[1].replace(/\s+/g,'_'));
          //console.error(`add(${rev_pred.id},rdf.type,schema.significantLinks)`);
          //console.error(`add(${rev_pred.id},rdf.type,${rev_pred_type.id})`);
          //console.error(`add(${rev_pred.id},schema.name,${to_from[0]})`);
          //console.error(`add(${sub},${rev_pred.id},${obj})`);
          add(rev_pred,rdf.type,schema.significantLinks);
          add(rev_pred,rdf.type,rev_pred_type);
          add(rev_pred,schema.name,literal(to_from[1]));
          add(obj,rev_pred,sub);
        }
      });
    } else {
      // Now get the labels to use
      card.labels.forEach((l)=>{
        add(n,schema.label,literal(l.name));
      });

      add(n,rdf.type,schema.WebPage);
      if ("desc" in card) {
        /* This section checks for a missing space between a # character and a section header
              example:
                #Images or #Sources vs # Images or # Sources (correct formatting to not break in marked.lexer)
        */
        if ( card.desc.match(/\#\w+\n/g) ) {
          card.desc = card.desc.replace(/\#\b/g, '# ');
        }
        await add_desc(n,card.desc);
      }
    }
  }
}
